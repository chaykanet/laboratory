int
Тип данных для целых чисел.
float
Тип данных для чисел с плавающей запятой.
double
Тип данных для двойной точности чисел с плавающей запятой.
char
Тип данных для символов.
bool
Тип данных для логических значений (true/false).
if
Условный оператор.
for
Цикл с известным количеством итераций.
while
Цикл с неизвестным количеством итераций.
return
Возврат значения из функции.
void
Функция, не возвращающая значение.
class
Определение класса.
public
Уровень доступа - публичный.
private
Уровень доступа - приватный.
protected
Уровень доступа - защищённый.
namespace
Область видимости для идентификаторов.
template
Шаблоны для создания общих функций.
new
Оператор для динамического выделения памяти.
delete
Оператор для освобождения динамически выделенной памяти.
static
Хранение переменной между вызовами функции.
inline
Оптимизация функций на этапе компиляции.
struct
Структура, позволяющая объединять различные типы данных.
const
Модификатор, указывающий, что значение переменной не может измениться.
volatile
Модификатор, указывающий, что переменная может изменяться вне текущего потока выполнения.
sizeof
Оператор для определения размера типа данных или переменной в байтах.
dynamic_cast
Оператор для безопасного приведения типов, специфичный для классов с динамическим связыванием.
static_cast
Оператор для явного приведения типов на этапе компиляции.
reinterpret_cast
Оператор для низкоуровневого приведения типов, позволяет преобразовать любой указатель в другой.
friend
Декларатор класса или функции, который предоставляет доступ к приватным и защищённым членам другого класса.
virtual
Ключевое слово для указания виртуальных функций в классах, обеспечивающее полиморфизм.
override
Указывает, что функция переопределяет виртуальную функцию базового класса.
final
Указывает, что класс не может быть унаследован или функция не может быть переопределена.
using
Используется для создания псевдонимов типов и для работы с пространствами имен.
namespace
Область видимости, помогающая избежать конфликтов имен.
operator
Специальный метод для переопределения поведения операторов.
catch
Блок для обработки исключений.
throw
Оператор для генерации исключений.
try
Блок, в котором код проверяется на наличие исключений.
std
Пространство имен для стандартной библиотеки C++.
vector
Контейнер стандартной библиотеки для работы с динамическим массивом.
map
Ассоциативный контейнер, который хранит пары ключ-значение.
set
Контейнер, который хранит уникальные элементы в упорядоченном виде.
list
Двунаправленный список, позволяющий эффективно добавлять и удалять элементы.
iterator
Объект, позволяющий последовательно проходить элементы контейнера.
nullptr
Указатель на нуль, безопасный для использования вместо NULL.
auto
Тип, который автоматически определяется компилятором на основе инициализации.
decltype
Оператор, определяющий тип выражения во время компиляции.
explicit
Ключевое слово, использующееся для запрета неявного преобразования типов.
mutable
Модификатор, позволяющий изменять значения членов объекта внутри константных методов.
this
Указатель на текущий экземпляр класса.
nullptr_t
Тип, представляющий нулевой указатель (nullptr).
deque
Двусторонняя очередь, позволяющая добавлять и удалять элементы с обоих концов.
list
Двусвязный список, предоставляющий возможность эффективно вставлять и удалять элементы.
algorithm
Набор стандартных функций для выполнения операций над контейнерами, таких как сортировка и поиск.
iterator
Объект, позволяющий пройти по элементам контейнера.
template
Шаблон, позволяющий создавать обобщенные функции и классы, работающие с разными типами данных.
class
Шаблон для создания объектов, который описывает их свойства и поведение.
object
Экземпляр класса, имеющий свой собственный набор данных и методов.
inheritance
Наследование - механизм, позволяющий одному классу наследовать свойства и методы другого.
polymorphism
Полиморфизм - возможность использования одного интерфейса для разных типов объектов.
constructor
Специальный метод класса для инициализации объекта при его создании.
destructor
Специальный метод класса, вызываемый при уничтожении объекта.
initializer list
Список инициализации, позволяющий инициализировать члены класса в конструкторе.
nullptr
Специальное значение, представляющее нулевой указатель в C++11 и позднее.
unique_ptr
Умный указатель, предоставляющий эксклюзивное владение объектом и автоматически освобождающий память.
shared_ptr
Умный указатель, позволяющий нескольким указателям ссылаться на один и тот же объект.
weak_ptr
Умный указатель, не увеличивающий счетчик ссылок, используется для предотвращения циклических зависимостей.
std::optional
Шаблон, представляющий значение, которое может или не может быть задано.
std::variant
Шаблон для хранения одного из нескольких типов значений.
move semantics
Управление ресурсами, позволяющее "перемещать" ресурсы вместо их копирования.
RAII (Resource Acquisition Is Initialization)
Принцип управления, при котором ресурсы выделяются при инициализации объектов и освобождаются при их разрушении.